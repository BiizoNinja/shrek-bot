{"version":3,"file":"index-browser-esm.min.js","sources":["../src/jsonpath.js","../src/jsonpath-browser.js"],"sourcesContent":["/* eslint-disable unicorn/prefer-spread -- IIRC, Babel's performance\n  with this not good */\nconst {hasOwnProperty: hasOwnProp} = Object.prototype;\n\n/**\n* @typedef {null|boolean|number|string|PlainObject|GenericArray} JSONObject\n*/\n\n/**\n * Copies array and then pushes item into it.\n * @param {GenericArray} arr Array to copy and into which to push\n * @param {any} item Array item to add (to end)\n * @returns {GenericArray} Copy of the original array\n */\nfunction push (arr, item) {\n    arr = arr.slice();\n    arr.push(item);\n    return arr;\n}\n/**\n * Copies array and then unshifts item into it.\n * @param {any} item Array item to add (to beginning)\n * @param {GenericArray} arr Array to copy and into which to unshift\n * @returns {GenericArray} Copy of the original array\n */\nfunction unshift (item, arr) {\n    arr = arr.slice();\n    arr.unshift(item);\n    return arr;\n}\n\n/**\n * Caught when JSONPath is used without `new` but rethrown if with `new`\n * @extends Error\n */\nclass NewError extends Error {\n    /**\n     * @param {any} value The evaluated scalar value\n     */\n    constructor (value) {\n        super(\n            'JSONPath should not be called with \"new\" (it prevents return ' +\n            'of (unwrapped) scalar values)'\n        );\n        this.avoidNew = true;\n        this.value = value;\n        this.name = 'NewError';\n    }\n}\n\n/**\n* @typedef {PlainObject} ReturnObject\n* @property {string} path\n* @property {JSONObject} value\n* @property {PlainObject|GenericArray} parent\n* @property {string} parentProperty\n*/\n\n/**\n* @callback JSONPathCallback\n* @param {string|PlainObject} preferredOutput\n* @param {\"value\"|\"property\"} type\n* @param {ReturnObject} fullRetObj\n* @returns {void}\n*/\n\n/**\n* @callback OtherTypeCallback\n* @param {JSONObject} val\n* @param {string} path\n* @param {PlainObject|GenericArray} parent\n* @param {string} parentPropName\n* @returns {boolean}\n*/\n\n/* eslint-disable max-len -- Can make multiline type after https://github.com/syavorsky/comment-parser/issues/109 */\n/**\n * @typedef {PlainObject} JSONPathOptions\n * @property {JSON} json\n * @property {string|string[]} path\n * @property {\"value\"|\"path\"|\"pointer\"|\"parent\"|\"parentProperty\"|\"all\"} [resultType=\"value\"]\n * @property {boolean} [flatten=false]\n * @property {boolean} [wrap=true]\n * @property {PlainObject} [sandbox={}]\n * @property {boolean} [preventEval=false]\n * @property {PlainObject|GenericArray|null} [parent=null]\n * @property {string|null} [parentProperty=null]\n * @property {JSONPathCallback} [callback]\n * @property {OtherTypeCallback} [otherTypeCallback] Defaults to\n *   function which throws on encountering `@other`\n * @property {boolean} [autostart=true]\n */\n/* eslint-enable max-len -- Can make multiline type after https://github.com/syavorsky/comment-parser/issues/109 */\n\n/**\n * @param {string|JSONPathOptions} opts If a string, will be treated as `expr`\n * @param {string} [expr] JSON path to evaluate\n * @param {JSON} [obj] JSON object to evaluate against\n * @param {JSONPathCallback} [callback] Passed 3 arguments: 1) desired payload\n *     per `resultType`, 2) `\"value\"|\"property\"`, 3) Full returned object with\n *     all payloads\n * @param {OtherTypeCallback} [otherTypeCallback] If `@other()` is at the end\n *   of one's query, this will be invoked with the value of the item, its\n *   path, its parent, and its parent's property name, and it should return\n *   a boolean indicating whether the supplied value belongs to the \"other\"\n *   type or not (or it may handle transformations and return `false`).\n * @returns {JSONPath}\n * @class\n */\nfunction JSONPath (opts, expr, obj, callback, otherTypeCallback) {\n    // eslint-disable-next-line no-restricted-syntax\n    if (!(this instanceof JSONPath)) {\n        try {\n            return new JSONPath(opts, expr, obj, callback, otherTypeCallback);\n        } catch (e) {\n            if (!e.avoidNew) {\n                throw e;\n            }\n            return e.value;\n        }\n    }\n\n    if (typeof opts === 'string') {\n        otherTypeCallback = callback;\n        callback = obj;\n        obj = expr;\n        expr = opts;\n        opts = null;\n    }\n    const optObj = opts && typeof opts === 'object';\n    opts = opts || {};\n    this.json = opts.json || obj;\n    this.path = opts.path || expr;\n    this.resultType = opts.resultType || 'value';\n    this.flatten = opts.flatten || false;\n    this.wrap = hasOwnProp.call(opts, 'wrap') ? opts.wrap : true;\n    this.sandbox = opts.sandbox || {};\n    this.preventEval = opts.preventEval || false;\n    this.parent = opts.parent || null;\n    this.parentProperty = opts.parentProperty || null;\n    this.callback = opts.callback || callback || null;\n    this.otherTypeCallback = opts.otherTypeCallback ||\n        otherTypeCallback ||\n        function () {\n            throw new TypeError(\n                'You must supply an otherTypeCallback callback option ' +\n                'with the @other() operator.'\n            );\n        };\n\n    if (opts.autostart !== false) {\n        const args = {\n            path: (optObj ? opts.path : expr)\n        };\n        if (!optObj) {\n            args.json = obj;\n        } else if ('json' in opts) {\n            args.json = opts.json;\n        }\n        const ret = this.evaluate(args);\n        if (!ret || typeof ret !== 'object') {\n            throw new NewError(ret);\n        }\n        return ret;\n    }\n}\n\n// PUBLIC METHODS\nJSONPath.prototype.evaluate = function (\n    expr, json, callback, otherTypeCallback\n) {\n    let currParent = this.parent,\n        currParentProperty = this.parentProperty;\n    let {flatten, wrap} = this;\n\n    this.currResultType = this.resultType;\n    this.currPreventEval = this.preventEval;\n    this.currSandbox = this.sandbox;\n    callback = callback || this.callback;\n    this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;\n\n    json = json || this.json;\n    expr = expr || this.path;\n    if (expr && typeof expr === 'object' && !Array.isArray(expr)) {\n        if (!expr.path && expr.path !== '') {\n            throw new TypeError(\n                'You must supply a \"path\" property when providing an object ' +\n                'argument to JSONPath.evaluate().'\n            );\n        }\n        if (!(hasOwnProp.call(expr, 'json'))) {\n            throw new TypeError(\n                'You must supply a \"json\" property when providing an object ' +\n                'argument to JSONPath.evaluate().'\n            );\n        }\n        ({json} = expr);\n        flatten = hasOwnProp.call(expr, 'flatten') ? expr.flatten : flatten;\n        this.currResultType = hasOwnProp.call(expr, 'resultType')\n            ? expr.resultType\n            : this.currResultType;\n        this.currSandbox = hasOwnProp.call(expr, 'sandbox')\n            ? expr.sandbox\n            : this.currSandbox;\n        wrap = hasOwnProp.call(expr, 'wrap') ? expr.wrap : wrap;\n        this.currPreventEval = hasOwnProp.call(expr, 'preventEval')\n            ? expr.preventEval\n            : this.currPreventEval;\n        callback = hasOwnProp.call(expr, 'callback') ? expr.callback : callback;\n        this.currOtherTypeCallback = hasOwnProp.call(expr, 'otherTypeCallback')\n            ? expr.otherTypeCallback\n            : this.currOtherTypeCallback;\n        currParent = hasOwnProp.call(expr, 'parent') ? expr.parent : currParent;\n        currParentProperty = hasOwnProp.call(expr, 'parentProperty')\n            ? expr.parentProperty\n            : currParentProperty;\n        expr = expr.path;\n    }\n    currParent = currParent || null;\n    currParentProperty = currParentProperty || null;\n\n    if (Array.isArray(expr)) {\n        expr = JSONPath.toPathString(expr);\n    }\n    if ((!expr && expr !== '') || !json) {\n        return undefined;\n    }\n    this._obj = json;\n\n    const exprList = JSONPath.toPathArray(expr);\n    if (exprList[0] === '$' && exprList.length > 1) { exprList.shift(); }\n    this._hasParentSelector = null;\n    const result = this\n        ._trace(\n            exprList, json, ['$'], currParent, currParentProperty, callback\n        )\n        .filter(function (ea) { return ea && !ea.isParentSelector; });\n\n    if (!result.length) { return wrap ? [] : undefined; }\n    if (!wrap && result.length === 1 && !result[0].hasArrExpr) {\n        return this._getPreferredOutput(result[0]);\n    }\n    return result.reduce((rslt, ea) => {\n        const valOrPath = this._getPreferredOutput(ea);\n        if (flatten && Array.isArray(valOrPath)) {\n            rslt = rslt.concat(valOrPath);\n        } else {\n            rslt.push(valOrPath);\n        }\n        return rslt;\n    }, []);\n};\n\n// PRIVATE METHODS\n\nJSONPath.prototype._getPreferredOutput = function (ea) {\n    const resultType = this.currResultType;\n    switch (resultType) {\n    case 'all': {\n        const path = Array.isArray(ea.path)\n            ? ea.path\n            : JSONPath.toPathArray(ea.path);\n        ea.pointer = JSONPath.toPointer(path);\n        ea.path = typeof ea.path === 'string'\n            ? ea.path\n            : JSONPath.toPathString(ea.path);\n        return ea;\n    } case 'value': case 'parent': case 'parentProperty':\n        return ea[resultType];\n    case 'path':\n        return JSONPath.toPathString(ea[resultType]);\n    case 'pointer':\n        return JSONPath.toPointer(ea.path);\n    default:\n        throw new TypeError('Unknown result type');\n    }\n};\n\nJSONPath.prototype._handleCallback = function (fullRetObj, callback, type) {\n    if (callback) {\n        const preferredOutput = this._getPreferredOutput(fullRetObj);\n        fullRetObj.path = typeof fullRetObj.path === 'string'\n            ? fullRetObj.path\n            : JSONPath.toPathString(fullRetObj.path);\n        // eslint-disable-next-line node/callback-return\n        callback(preferredOutput, type, fullRetObj);\n    }\n};\n\n/**\n *\n * @param {string} expr\n * @param {JSONObject} val\n * @param {string} path\n * @param {PlainObject|GenericArray} parent\n * @param {string} parentPropName\n * @param {JSONPathCallback} callback\n * @param {boolean} hasArrExpr\n * @param {boolean} literalPriority\n * @returns {ReturnObject|ReturnObject[]}\n */\nJSONPath.prototype._trace = function (\n    expr, val, path, parent, parentPropName, callback, hasArrExpr,\n    literalPriority\n) {\n    // No expr to follow? return path and value as the result of\n    //  this trace branch\n    let retObj;\n    if (!expr.length) {\n        retObj = {\n            path,\n            value: val,\n            parent,\n            parentProperty: parentPropName,\n            hasArrExpr\n        };\n        this._handleCallback(retObj, callback, 'value');\n        return retObj;\n    }\n\n    const loc = expr[0], x = expr.slice(1);\n\n    // We need to gather the return value of recursive trace calls in order to\n    // do the parent sel computation.\n    const ret = [];\n    /**\n     *\n     * @param {ReturnObject|ReturnObject[]} elems\n     * @returns {void}\n     */\n    function addRet (elems) {\n        if (Array.isArray(elems)) {\n            // This was causing excessive stack size in Node (with or\n            //  without Babel) against our performance test:\n            //  `ret.push(...elems);`\n            elems.forEach((t) => {\n                ret.push(t);\n            });\n        } else {\n            ret.push(elems);\n        }\n    }\n    if ((typeof loc !== 'string' || literalPriority) && val &&\n        hasOwnProp.call(val, loc)\n    ) { // simple case--directly follow property\n        addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback,\n            hasArrExpr));\n    } else if (loc === '*') { // all child properties\n        this._walk(\n            loc, x, val, path, parent, parentPropName, callback,\n            (m, l, _x, v, p, par, pr, cb) => {\n                addRet(this._trace(unshift(m, _x), v, p, par, pr, cb,\n                    true, true));\n            }\n        );\n    } else if (loc === '..') { // all descendent parent properties\n        // Check remaining expression with val's immediate children\n        addRet(\n            this._trace(x, val, path, parent, parentPropName, callback,\n                hasArrExpr)\n        );\n        this._walk(\n            loc, x, val, path, parent, parentPropName, callback,\n            (m, l, _x, v, p, par, pr, cb) => {\n                // We don't join m and x here because we only want parents,\n                //   not scalar values\n                if (typeof v[m] === 'object') {\n                    // Keep going with recursive descent on val's\n                    //   object children\n                    addRet(this._trace(\n                        unshift(l, _x), v[m], push(p, m), v, m, cb, true\n                    ));\n                }\n            }\n        );\n    // The parent sel computation is handled in the frame above using the\n    // ancestor object of val\n    } else if (loc === '^') {\n        // This is not a final endpoint, so we do not invoke the callback here\n        this._hasParentSelector = true;\n        return {\n            path: path.slice(0, -1),\n            expr: x,\n            isParentSelector: true\n        };\n    } else if (loc === '~') { // property name\n        retObj = {\n            path: push(path, loc),\n            value: parentPropName,\n            parent,\n            parentProperty: null\n        };\n        this._handleCallback(retObj, callback, 'property');\n        return retObj;\n    } else if (loc === '$') { // root only\n        addRet(this._trace(x, val, path, null, null, callback, hasArrExpr));\n    } else if ((/^(-?\\d*):(-?\\d*):?(\\d*)$/u).test(loc)) { // [start:end:step]  Python slice syntax\n        addRet(\n            this._slice(loc, x, val, path, parent, parentPropName, callback)\n        );\n    } else if (loc.indexOf('?(') === 0) { // [?(expr)] (filtering)\n        if (this.currPreventEval) {\n            throw new Error('Eval [?(expr)] prevented in JSONPath expression.');\n        }\n        this._walk(\n            loc, x, val, path, parent, parentPropName, callback,\n            (m, l, _x, v, p, par, pr, cb) => {\n                if (this._eval(l.replace(/^\\?\\((.*?)\\)$/u, '$1'), v[m], m, p, par, pr)) {\n                    addRet(this._trace(unshift(m, _x), v, p, par, pr, cb,\n                        true));\n                }\n            }\n        );\n    } else if (loc[0] === '(') { // [(expr)] (dynamic property/index)\n        if (this.currPreventEval) {\n            throw new Error('Eval [(expr)] prevented in JSONPath expression.');\n        }\n        // As this will resolve to a property name (but we don't know it\n        //  yet), property and parent information is relative to the\n        //  parent of the property to which this expression will resolve\n        addRet(this._trace(unshift(\n            this._eval(\n                loc, val, path[path.length - 1],\n                path.slice(0, -1), parent, parentPropName\n            ),\n            x\n        ), val, path, parent, parentPropName, callback, hasArrExpr));\n    } else if (loc[0] === '@') { // value type: @boolean(), etc.\n        let addType = false;\n        const valueType = loc.slice(1, -2);\n        switch (valueType) {\n        case 'scalar':\n            if (!val || !(['object', 'function'].includes(typeof val))) {\n                addType = true;\n            }\n            break;\n        case 'boolean': case 'string': case 'undefined': case 'function':\n            // eslint-disable-next-line valid-typeof\n            if (typeof val === valueType) {\n                addType = true;\n            }\n            break;\n        case 'integer':\n            if (Number.isFinite(val) && !(val % 1)) {\n                addType = true;\n            }\n            break;\n        case 'number':\n            if (Number.isFinite(val)) {\n                addType = true;\n            }\n            break;\n        case 'nonFinite':\n            if (typeof val === 'number' && !Number.isFinite(val)) {\n                addType = true;\n            }\n            break;\n        case 'object':\n            // eslint-disable-next-line valid-typeof\n            if (val && typeof val === valueType) {\n                addType = true;\n            }\n            break;\n        case 'array':\n            if (Array.isArray(val)) {\n                addType = true;\n            }\n            break;\n        case 'other':\n            addType = this.currOtherTypeCallback(\n                val, path, parent, parentPropName\n            );\n            break;\n        case 'null':\n            if (val === null) {\n                addType = true;\n            }\n            break;\n        /* istanbul ignore next */\n        default:\n            throw new TypeError('Unknown value type ' + valueType);\n        }\n        if (addType) {\n            retObj = {path, value: val, parent, parentProperty: parentPropName};\n            this._handleCallback(retObj, callback, 'value');\n            return retObj;\n        }\n    // `-escaped property\n    } else if (loc[0] === '`' && val && hasOwnProp.call(val, loc.slice(1))) {\n        const locProp = loc.slice(1);\n        addRet(this._trace(\n            x, val[locProp], push(path, locProp), val, locProp, callback,\n            hasArrExpr, true\n        ));\n    } else if (loc.includes(',')) { // [name1,name2,...]\n        const parts = loc.split(',');\n        for (const part of parts) {\n            addRet(this._trace(\n                unshift(part, x), val, path, parent, parentPropName, callback,\n                true\n            ));\n        }\n    // simple case--directly follow property\n    } else if (\n        !literalPriority && val && hasOwnProp.call(val, loc)\n    ) {\n        addRet(\n            this._trace(x, val[loc], push(path, loc), val, loc, callback,\n                hasArrExpr, true)\n        );\n    }\n\n    // We check the resulting values for parent selections. For parent\n    // selections we discard the value object and continue the trace with the\n    // current val object\n    if (this._hasParentSelector) {\n        for (let t = 0; t < ret.length; t++) {\n            const rett = ret[t];\n            if (rett && rett.isParentSelector) {\n                const tmp = this._trace(\n                    rett.expr, val, rett.path, parent, parentPropName, callback,\n                    hasArrExpr\n                );\n                if (Array.isArray(tmp)) {\n                    ret[t] = tmp[0];\n                    const tl = tmp.length;\n                    for (let tt = 1; tt < tl; tt++) {\n                        t++;\n                        ret.splice(t, 0, tmp[tt]);\n                    }\n                } else {\n                    ret[t] = tmp;\n                }\n            }\n        }\n    }\n    return ret;\n};\n\nJSONPath.prototype._walk = function (\n    loc, expr, val, path, parent, parentPropName, callback, f\n) {\n    if (Array.isArray(val)) {\n        const n = val.length;\n        for (let i = 0; i < n; i++) {\n            f(i, loc, expr, val, path, parent, parentPropName, callback);\n        }\n    } else if (val && typeof val === 'object') {\n        Object.keys(val).forEach((m) => {\n            f(m, loc, expr, val, path, parent, parentPropName, callback);\n        });\n    }\n};\n\nJSONPath.prototype._slice = function (\n    loc, expr, val, path, parent, parentPropName, callback\n) {\n    if (!Array.isArray(val)) { return undefined; }\n    const len = val.length, parts = loc.split(':'),\n        step = (parts[2] && Number.parseInt(parts[2])) || 1;\n    let start = (parts[0] && Number.parseInt(parts[0])) || 0,\n        end = (parts[1] && Number.parseInt(parts[1])) || len;\n    start = (start < 0) ? Math.max(0, start + len) : Math.min(len, start);\n    end = (end < 0) ? Math.max(0, end + len) : Math.min(len, end);\n    const ret = [];\n    for (let i = start; i < end; i += step) {\n        const tmp = this._trace(\n            unshift(i, expr), val, path, parent, parentPropName, callback, true\n        );\n        // Should only be possible to be an array here since first part of\n        //   ``unshift(i, expr)` passed in above would not be empty, nor `~`,\n        //     nor begin with `@` (as could return objects)\n        // This was causing excessive stack size in Node (with or\n        //  without Babel) against our performance test: `ret.push(...tmp);`\n        tmp.forEach((t) => {\n            ret.push(t);\n        });\n    }\n    return ret;\n};\n\nJSONPath.prototype._eval = function (\n    code, _v, _vname, path, parent, parentPropName\n) {\n    if (!this._obj || !_v) { return false; }\n    if (code.includes('@parentProperty')) {\n        this.currSandbox._$_parentProperty = parentPropName;\n        code = code.replace(/@parentProperty/gu, '_$_parentProperty');\n    }\n    if (code.includes('@parent')) {\n        this.currSandbox._$_parent = parent;\n        code = code.replace(/@parent/gu, '_$_parent');\n    }\n    if (code.includes('@property')) {\n        this.currSandbox._$_property = _vname;\n        code = code.replace(/@property/gu, '_$_property');\n    }\n    if (code.includes('@path')) {\n        this.currSandbox._$_path = JSONPath.toPathString(path.concat([_vname]));\n        code = code.replace(/@path/gu, '_$_path');\n    }\n    if (code.includes('@root')) {\n        this.currSandbox._$_root = this.json;\n        code = code.replace(/@root/gu, '_$_root');\n    }\n    if ((/@([.\\s)[])/u).test(code)) {\n        this.currSandbox._$_v = _v;\n        code = code.replace(/@([.\\s)[])/gu, '_$_v$1');\n    }\n    try {\n        return this.vm.runInNewContext(code, this.currSandbox);\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(e);\n        throw new Error('jsonPath: ' + e.message + ': ' + code);\n    }\n};\n\n// PUBLIC CLASS PROPERTIES AND METHODS\n\n// Could store the cache object itself\nJSONPath.cache = {};\n\n/**\n * @param {string[]} pathArr Array to convert\n * @returns {string} The path string\n */\nJSONPath.toPathString = function (pathArr) {\n    const x = pathArr, n = x.length;\n    let p = '$';\n    for (let i = 1; i < n; i++) {\n        if (!(/^(~|\\^|@.*?\\(\\))$/u).test(x[i])) {\n            p += (/^[0-9*]+$/u).test(x[i]) ? ('[' + x[i] + ']') : (\"['\" + x[i] + \"']\");\n        }\n    }\n    return p;\n};\n\n/**\n * @param {string} pointer JSON Path\n * @returns {string} JSON Pointer\n */\nJSONPath.toPointer = function (pointer) {\n    const x = pointer, n = x.length;\n    let p = '';\n    for (let i = 1; i < n; i++) {\n        if (!(/^(~|\\^|@.*?\\(\\))$/u).test(x[i])) {\n            p += '/' + x[i].toString()\n                .replace(/~/gu, '~0')\n                .replace(/\\//gu, '~1');\n        }\n    }\n    return p;\n};\n\n/**\n * @param {string} expr Expression to convert\n * @returns {string[]}\n */\nJSONPath.toPathArray = function (expr) {\n    const {cache} = JSONPath;\n    if (cache[expr]) { return cache[expr].concat(); }\n    const subx = [];\n    const normalized = expr\n        // Properties\n        .replace(\n            /@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\\(\\)/gu,\n            ';$&;'\n        )\n        // Parenthetical evaluations (filtering and otherwise), directly\n        //   within brackets or single quotes\n        .replace(/[['](\\??\\(.*?\\))[\\]']/gu, function ($0, $1) {\n            return '[#' + (subx.push($1) - 1) + ']';\n        })\n        // Escape periods and tildes within properties\n        .replace(/\\['([^'\\]]*)'\\]/gu, function ($0, prop) {\n            return \"['\" + prop\n                .replace(/\\./gu, '%@%')\n                .replace(/~/gu, '%%@@%%') +\n                \"']\";\n        })\n        // Properties operator\n        .replace(/~/gu, ';~;')\n        // Split by property boundaries\n        .replace(/'?\\.'?(?![^[]*\\])|\\['?/gu, ';')\n        // Reinsert periods within properties\n        .replace(/%@%/gu, '.')\n        // Reinsert tildes within properties\n        .replace(/%%@@%%/gu, '~')\n        // Parent\n        .replace(/(?:;)?(\\^+)(?:;)?/gu, function ($0, ups) {\n            return ';' + ups.split('').join(';') + ';';\n        })\n        // Descendents\n        .replace(/;;;|;;/gu, ';..;')\n        // Remove trailing\n        .replace(/;$|'?\\]|'$/gu, '');\n\n    const exprList = normalized.split(';').map(function (exp) {\n        const match = exp.match(/#(\\d+)/u);\n        return !match || !match[1] ? exp : subx[match[1]];\n    });\n    cache[expr] = exprList;\n    return cache[expr];\n};\n\nexport {JSONPath};\n","import {JSONPath} from './jsonpath.js';\n\n/**\n* @callback ConditionCallback\n* @param {any} item\n* @returns {boolean}\n*/\n\n/**\n * Copy items out of one array into another.\n * @param {GenericArray} source Array with items to copy\n * @param {GenericArray} target Array to which to copy\n * @param {ConditionCallback} conditionCb Callback passed the current item;\n *     will move item if evaluates to `true`\n * @returns {void}\n */\nconst moveToAnotherArray = function (source, target, conditionCb) {\n    const il = source.length;\n    for (let i = 0; i < il; i++) {\n        const item = source[i];\n        if (conditionCb(item)) {\n            target.push(source.splice(i--, 1)[0]);\n        }\n    }\n};\n\nJSONPath.prototype.vm = {\n    /**\n     * @param {string} expr Expression to evaluate\n     * @param {PlainObject} context Object whose items will be added\n     *   to evaluation\n     * @returns {any} Result of evaluated code\n     */\n    runInNewContext (expr, context) {\n        const keys = Object.keys(context);\n        const funcs = [];\n        moveToAnotherArray(keys, funcs, (key) => {\n            return typeof context[key] === 'function';\n        });\n        const values = keys.map((vr, i) => {\n            return context[vr];\n        });\n\n        const funcString = funcs.reduce((s, func) => {\n            let fString = context[func].toString();\n            if (!(/function/u).test(fString)) {\n                fString = 'function ' + fString;\n            }\n            return 'var ' + func + '=' + fString + ';' + s;\n        }, '');\n\n        expr = funcString + expr;\n\n        // Mitigate http://perfectionkills.com/global-eval-what-are-the-options/#new_function\n        if (!(/(['\"])use strict\\1/u).test(expr) &&\n            !keys.includes('arguments')\n        ) {\n            expr = 'var arguments = undefined;' + expr;\n        }\n\n        // Remove last semi so `return` will be inserted before\n        //  the previous one instead, allowing for the return\n        //  of a bare ending expression\n        expr = expr.replace(/;\\s*$/u, '');\n\n        // Insert `return`\n        const lastStatementEnd = expr.lastIndexOf(';');\n        const code = (lastStatementEnd > -1\n            ? expr.slice(0, lastStatementEnd + 1) +\n                ' return ' + expr.slice(lastStatementEnd + 1)\n            : ' return ' + expr);\n\n        // eslint-disable-next-line no-new-func\n        return (new Function(...keys, code))(...values);\n    }\n};\n\nexport {JSONPath};\n"],"names":["hasOwnProp","Object","prototype","hasOwnProperty","push","arr","item","slice","unshift","NewError","Error","value","avoidNew","name","JSONPath","opts","expr","obj","callback","otherTypeCallback","this","e","optObj","_typeof","json","path","resultType","flatten","wrap","call","sandbox","preventEval","parent","parentProperty","TypeError","autostart","args","ret","evaluate","currParent","currParentProperty","currResultType","currPreventEval","currSandbox","currOtherTypeCallback","Array","isArray","toPathString","_obj","exprList","toPathArray","length","shift","_hasParentSelector","result","_trace","filter","ea","isParentSelector","hasArrExpr","reduce","rslt","valOrPath","_this2","_getPreferredOutput","concat","undefined","pointer","toPointer","_handleCallback","fullRetObj","type","preferredOutput","val","parentPropName","literalPriority","retObj","loc","x","addRet","elems","forEach","t","_walk","m","l","_x","v","p","par","pr","cb","_this3","test","_slice","indexOf","_eval","replace","addType","valueType","includes","Number","isFinite","locProp","split","part","rett","tmp","tl","tt","splice","f","n","i","keys","len","parts","step","parseInt","start","end","Math","max","min","code","_v","_vname","_$_parentProperty","_$_parent","_$_property","_$_path","_$_root","_$_v","vm","runInNewContext","console","log","message","cache","pathArr","toString","subx","$0","$1","prop","ups","join","map","exp","match","context","funcs","source","target","conditionCb","il","moveToAnotherArray","key","values","vr","funcString","s","func","fString","lastStatementEnd","lastIndexOf","_construct","Function"],"mappings":"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"}